{-
    https://projecteuler.net/problem=2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million,
	find the sum of the even-valued terms.
-}

-- | Returns the sum of even Fibonacci numbers up to but not including the given limit.
sumEvenFib :: Integer -> Integer -- Function signature, takes an Integer and returns an Integer
sumEvenFib limit = go 1 2 0 -- Takes argument `limit` and is defined as `go 1 2 0`
  where
    go :: Integer -> Integer -> Integer -> Integer
    go a b total -- self recursion to iterate through Fibonacci sequence and accumulate even numbers
      | a >= limit = total -- if a is greater than or equal to the limit, return the total
      | even a = go b (a + b) (total + a) -- if a is even, add it to the total and iterate through the sequence
      | otherwise = go b (a + b) total -- otherwise iterate through the sequence

main :: IO ()
main = print (sumEvenFib (4 * 10 ^ 6)) -- Haskell uses `^` for exponentiation, not `**`
